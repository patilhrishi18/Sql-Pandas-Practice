# LeetCode

## Recyclable and Low Fat Products
/* Write your T-SQL query statement below */
SELECT Product_id 
FROM Products 
WHERE low_fats = 'Y' and recyclable = 'Y'


## Find Customer Referee

/* Write your T-SQL query statement below */
SELECT name
FROM Customer 
WHERE referee_id <> 2 or referee_id is null


## Big Countries

/* Write your T-SQL query statement below */
SELECT name, population, area
FROM World
WHERE area >= 3000000  or population >= 25000000

## Article Views

/* Write your T-SQL query statement below */
SELECT DISTINCT author_id id
FROM Views
WHERE viewer_id = author_id
ORDER BY id

## Invaild Tweets

/* Write your T-SQL query statement below */
SELECT tweet_id
FROM Tweets
WHERE LEN(content) > 15



## Replace Employee ID With The Unique Identifier
/* Write your T-SQL query statement below */
SELECT ee.unique_id, e.name
FROM Employees e
LEFT JOIN EmployeeUNI ee
ON e.id = ee.id

## Product Sales Analysis I
/* Write your T-SQL query statement below */
SELECT product_name, year, price
FROM Sales s
INNER JOIN Product p
ON s.product_id = p.product_id


## Customer Who Visited but Did Not Make Any Transactions

/* Write your T-SQL query statement below */
SELECT v.customer_id, count(v.customer_id) as count_no_trans
FROM Visits v
LEFT JOIN Transactions t
ON v.visit_id = t.visit_id
WHERE t.transaction_id  is NULL
GROUP BY v.customer_id


## Rising Temperature

/* Write your T-SQL query statement below */
SELECT w.id 
FROM Weather w
INNER JOIN Weather W1
ON DATEADD(day, -1, w.recordDate) = W1.recordDate
WHERE w.temperature > W1.temperature



## Managers with at Least 5 Direct Reports

/* Write your T-SQL query statement below */
SELECT m.name 
FROM Employee e
INNER JOIN Employee m
ON e.managerId = m.id
GROUP BY m.name, m.id
HAVING count(e.id) >= 5


## Monthly Transactions I

/* Write your T-SQL query statement below */
SELECT format(trans_date, 'yyyy-MM') as month, 
       country, 
       count(id) as trans_count, 
       SUM(CASE WHEN state = 'approved' THEN 1 ELSE 0 END) as approved_count, 
       SUM(amount) as trans_total_amount, 
       SUM(CASE WHEN state = 'approved' THEN amount ELSE 0 END) as approved_total_amount
FROM 
Transactions
GROUP BY format(trans_date, 'yyyy-MM'), country


## Second Highest Salary

/* Write your T-SQL query statement below */
WITH MAXSalary as (
    SELECT max(salary) as SALARY
    FROM Employee
)
SELECT 
    max(salary) as SecondhighestSalary
    FROM Employee
    WHERE
    salary < (Select SALARY FROM MAXSalary)


## Count Salary Categories

WITH category_cte AS (
    SELECT
        CASE 
            WHEN income < 20000 THEN 'Low Salary'
            WHEN income BETWEEN 20000 AND 50000 THEN 'Average Salary'
            ELSE 'High Salary'
        END AS category
    FROM Accounts
)
SELECT 
    c.category, 
    COUNT(cc.category) AS accounts_count
FROM (VALUES 
    ('Low Salary'), 
    ('Average Salary'), 
    ('High Salary')
) AS c(category)
LEFT JOIN category_cte cc
    ON c.category = cc.category
GROUP BY c.category;
